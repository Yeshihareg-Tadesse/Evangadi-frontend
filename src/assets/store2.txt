import React, { useEffect, useState } from "react";
//imports the useContext hook from React to access the context values
import { useContext } from "react";
//Imports the AppState context created in the App component
import { AppState } from "../../App";
import axios from "../../axiosConfig";
import { useNavigate } from "react-router-dom";
import questionerIMG from "../../assets/user 1.png";
import { IoIosArrowForward } from "react-icons/io";
import classes from  "./Home.module.css";
import Header from "../Header/Header";
//The Home component displays a welcome message to the user using the username value from the user object.It uses the useContext hook to access the user object from the AppState context. This object contains information about the logged-in user, such as their username.

function Home() {
  //provides the user object from the global state, which contains information about the logged-in user.
  const { user } = useContext(AppState);
  const [questions, setQuestions] = useState([]);
  const navigate = useNavigate();

  useEffect(() => {
    async function fetchQuestions() {
      const token = localStorage.getItem("token"); // Get token from local storage
      try {
        const { data } = await axios.get("/question", {
          headers: {
            Authorization: Bearer ${token}, // Include token in headers
          },
        });
        // Ensure data is an array before setting state
        if (Array.isArray(data.questions)) {
          setQuestions(data.questions);
        } else {
          console.error("Expected an array but got:", data);
        }
      } catch (error) {
        console.error(
          "Error fetching questions:",
          error.response?.data || error.message
        );
       if (error.response) {
         console.error("Response data:", error.response.data);
         console.error("Response status:", error.response.status);
         console.error("Response headers:", error.response.headers);
       }
        alert("Failed to load questions. Please try again later.");
      }
    }
    fetchQuestions();
  }, []);

  const handleQuestionClick = (questionId) => {
    navigate(/question/${questionId});
  };
  // <h1>Questions</h1>;
  return (
    <>
      <Header />
      <section className={classes.questionsPage}>
        <div className={classes.welcomeMessage}>
          <button
            className={classes.askQuestionButton}
            onClick={() => navigate("/question")}
          >
            Ask Question
          </button>
          <h1>
            Wellcome:<span>{user.username}</span>
          </h1>
        </div>
        <div className={classes.questionsList}>
          <h2>Questions</h2>
          {Array.isArray(questions) && questions.length === 0 ? (
            <p>No questions available.</p>
          ) : (
            Array.isArray(questions) &&
            questions
              .slice() // Create a shallow copy to avoid mutating the original array
              .reverse() // Reverse the order of the array
              .map((question) => (
                <div
                  key={question.question_id}
                  className={classes.questionItem}
                  onClick={() => handleQuestionClick(question.question_id)}
                >
                  <div className={classes.questionerInfo}>
                    <div>
                      <img
                        src={questionerIMG}
                        alt={${question.username}'s image}
                        className={classes.questionerImage}
                        style={{ width: "80px", height: "80px" }}
                      />
                      <h5 className={classes.username}>{question.username}</h5>
                    </div>
                    <h3>{question.title}</h3>
                    <IoIosArrowForward className={classes.icon} />
                  </div>
                </div>
              ))
          )}
        </div>
      </section>
    </>
  );
}
export default Home;
//imports specific functions which handle the logic for user-related operations
const { register, login, checkUser } = require("../controller/userController");


//sets up a POST route for /register to handle registration requests
router.post("/register", register);
  
//sets up a POST route for /login to handle login requests
router.post("/login", login);

//sets up a GET route for /check to check if the user is authenticated before calling the checkUser function
router.get("/checkUser",authMiddleware,checkUser);

module.exports = router;
const express = require("express");
const router = express.Router();

const {
  allQuestions,
  singleQuestion,
  postQuestion,
} = require("../controller/questionController");

router.get("/question", allQuestions);
router.get("/question/:question_id", singleQuestion);
router.post("/question", postQuestion);

module.exports = router;
const dbConnection = require("../db/dbConfig");

const { StatusCodes } = require("http-status-codes");

async function allQuestions(req, res) {
  try {
    // Query the database to get all questions with user information
    const [questions] =
      await dbConnection.query(SELECT q.question_id, q.title, q.description, u.username
      FROM questionTable q
      JOIN userTable u ON q.userid = u.userid);
      console.log(questions)

    // Check if there are no questions found
    if (questions.length === 0) {
      return res.status(404).json({
        error: "Not Found",
        message: "No questions found",
      });
    }

    // Respond with the list of questions
    return res.status(StatusCodes.OK).json({
      message: "Questions retrieved successfully",
      questions,
    });
  } catch (error) {
    // Log the error and respond with a server error message
    console.error("Error retrieving questions:", error);
    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      error: "Internal Server Error",
      message: "An unexpected error occurred.",
    });
  }
}


module.exports = { allQuestions };